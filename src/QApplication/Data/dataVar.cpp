#include "dataVar.h"
#include <QDateTime>
#include <QtWidgets/QApplication>
#include <QDesktopWidget>
//#include "MenuDebug/QtVisionWidget.h"

dataVar & dataVar::Instance()
{
	// TODO: 在此处插入 return 语句
	static dataVar ins;
	return ins;
}

int dataVar::Init()
{
	applicationPath			= QApplication::applicationDirPath();
	soft_key				= "59226f4700f1cc8a5de755d501af308d2d2";
	ConfigFolder			= applicationPath + "/config/";
	DefaultParamFolder		= applicationPath + "/default/";
	strLogPath				= applicationPath + "/Log/";
	software_name			= "Mechine Vision";
	software_vision			= "0.0.0.0";
	strLanguage				= "Language_zh.qm";
	m_pWindow				= nullptr;
	projectName				= QString();
	iLoginLevel				= 0;
	strUserName				= "Operator";

	m_bFirstScan			= false;
	m_iVisionThreadTest		= 0;
	m_bVisionThreadRun		= false;
	m_bVisionThreadNeedStop = false;
	m_iVisionThreadRunTime	= 1;
	//form_System_Precision	= 4;
	m_mapParam.clear();
	m_DialogbaseLst.clear();
	m_iVisionThreadAutoRun	= 0;
	iSendCommandDelay		= 500;
	iRecieveCommandDelay	= 500;
	iAllocateWays			= 1;
	Enable_Heartbeat_Second = false;
	auto_Heartbeat_Second	= 30;
	bAutoConnectedWhenStart = true;
	iMotionTimeOut			= 20000;
	iVisionTimeOut			= 5000;
	iDealVisionTimeOut		= 5000;
	//m_vecPtr.clear();
	//VideoWidgets.clear();
	return 0;
}

int dataVar::Exit()
{
	return 0;
}

void dataVar::InitDataBase()
{
	//SQLite数据库操作	
	QFileInfo file(dataVar::Instance().ConfigFolder + "MyDataBase.db");
	if (!file.exists())
	{
		dataVar::Instance().bol_connect = dataVar::Instance().sqlite.CreateConnectDB(dataVar::Instance().soft_key,
			dataVar::Instance().ConfigFolder + "MyDataBase.db");
		if (dataVar::Instance().bol_connect == true)
		{
			dataVar::Instance().sqlite.CreateTable(dataVar::Instance().soft_key, "LoginTable");
			dataVar::Instance().sqlite.InsertData(dataVar::Instance().soft_key, "LoginTable", "operator", "666666");
			dataVar::Instance().sqlite.InsertData(dataVar::Instance().soft_key, "LoginTable", "adminstaotor", "666666", "9");
		}
	}
	else
	{
		dataVar::Instance().bol_connect = dataVar::Instance().sqlite.CreateConnectDB(dataVar::Instance().soft_key,
			dataVar::Instance().ConfigFolder + "MyDataBase.db");
	}
}

void dataVar::CenterScreenWindow(QWidget * window)
{
	// 获取屏幕的宽度和高度
	int screenWidth = QApplication::desktop()->width();
	int screenHeight = QApplication::desktop()->height();

	// 获取子窗口的宽度和高度
	int windowWidth = window->width();
	int windowHeight = window->height();

	// 计算子窗口的左上角坐标
	int x = (screenWidth - windowWidth) / 2;
	int y = (screenHeight - windowHeight) / 2;

	// 将子窗口移动到屏幕中央
	window->move(x, y);
}

void dataVar::CenterMainWindow(QWidget * window)
{	
	if (dataVar::m_pWindow == nullptr)
		return;
	// 获取屏幕的宽度和高度
	int screenWidth = dataVar::m_pWindow->width();
	int screenHeight = dataVar::m_pWindow->height();

	// 获取子窗口的宽度和高度
	int windowWidth = window->width();
	int windowHeight = window->height();

	// 计算子窗口的左上角坐标
	int x = (screenWidth - windowWidth) / 2;
	int y = (screenHeight - windowHeight) / 2;

	// 将子窗口移动到屏幕中央
	window->move(x, y);
}

void dataVar::CenterWindow(QWidget * window, QWidget * subwindow)
{
	if (window == nullptr)	return;

	// 获取屏幕的宽度和高度
	int screenWidth		= window->width();
	int screenHeight	= window->height();

	// 获取子窗口的宽度和高度
	int windowWidth		= subwindow->width();
	int windowHeight	= subwindow->height();

	// 计算子窗口的左上角坐标
	int x = (screenWidth - windowWidth) / 2;
	int y = (screenHeight - windowHeight) / 2;

	// 将子窗口移动到屏幕中央
	subwindow->move(x, y);
}

void dataVar::ClearMenu(QMenu * menu)
{
	if (menu == nullptr)	return;
	QList<QAction*> actions = menu->actions();
	for (size_t i = 0; i < actions.size(); i++)
	{
		QMenu * _menu = actions[i]->menu();
		QString __text = actions[i]->text();
		if (_menu != nullptr)	ClearMenu(menu);
		if (actions[i]	!= nullptr)	delete actions[i];	actions[i]	= nullptr;
	}
	if (menu != nullptr)	delete menu;	menu = nullptr;
}

QByteArray dataVar::hexStrToByteArray(const QString & str)
{
	QByteArray senddata;
	int hexdata, lowhexdata;
	int hexdatalen = 0;
	int len = str.length();
	senddata.resize(len / 2);
	char lstr, hstr;
	for (int i = 0; i < len;)
	{
		hstr = str.at(i).toLatin1();
		if (hstr == ' ')
		{
			i++;
			continue;
		}
		i++;
		if (i >= len)
		{
			break;
		}
		lstr = str.at(i).toLatin1();
		hexdata = convertHexChar(hstr);
		lowhexdata = convertHexChar(lstr);
		if ((hexdata == 16) || (lowhexdata == 16))
		{
			break;
		}
		else
		{
			hexdata = hexdata * 16 + lowhexdata;
		}
		i++;
		senddata[hexdatalen] = (char)hexdata;
		hexdatalen++;
	}
	senddata.resize(hexdatalen);
	return senddata;
}

char dataVar::convertHexChar(char ch)
{
	if ((ch >= '0') && (ch <= '9'))
	{
		return ch - 0x30;
	}
	else if ((ch >= 'A') && (ch <= 'F'))
	{
		return ch - 'A' + 10;
	}
	else if ((ch >= 'a') && (ch <= 'f'))
	{
		return ch - 'a' + 10;
	}
	else
	{
		return (-1);
	}
}

QString dataVar::byteArrayToHexStr(const QByteArray & data)
{
	QString temp	= "";
	QString hex		= data.toHex();
	for (int i		= 0; i < hex.length(); i = i + 2) { temp += hex.mid(i, 2) + " "; }
	return temp.trimmed().toUpper();
}
/*
*********************************************************************************************************
*	函 数 名: ModbusCRC16
*	功能说明: 标准ModBusCRC16校验计算
*	形    参：buf:需要校验的数据  len:需要校验的数据长度
*	返 回 值: 校验码
*********************************************************************************************************
*/
unsigned short dataVar::ModbusCRC16(unsigned char * aData, unsigned int aSize)
{
	unsigned short CRC_OUT = 0XFFFF;
	unsigned int i, j;
	unsigned char crc_low, crc_high;
	for (i = 0; i<aSize; i++)
	{
		CRC_OUT ^= aData[i];
		for (j = 0; j<8; j++)
		{
			if ((CRC_OUT & 0x01) == 0x01)
			{
				CRC_OUT >>= 1;
				CRC_OUT ^= 0XA001;
			}
			else
			{
				CRC_OUT >>= 1;
			}
		}
	}
	//exchange high and low 8 bit
	crc_low = (unsigned char)CRC_OUT;
	crc_high = (unsigned char)(CRC_OUT >> 8);
	CRC_OUT = (unsigned short int)((crc_low << 8) + crc_high);

	return CRC_OUT;
}
// CRC 高位字节值表
static const uint8_t s_CRCHi[] = {
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};
// CRC 低位字节值表
const uint8_t s_CRCLo[] = {
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
	0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
	0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
	0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
	0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
	0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
	0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
	0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
	0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
	0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
	0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
	0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
	0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
	0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
	0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
	0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
	0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint32_t dataVar::CRC32(uint8_t *data, uint16_t len)
{
	//多项式 x32+x26+x23+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1 
	//最高位省略，即100 1100 0001 0001 1101 1011 0111
	uint32_t poly = 0x4c11DB7;

	uint32_t init_value = 0xffffffff;
	uint8_t datai;
	while (len--) {
		init_value ^= *data << 24;  //左移24位与初值进行异或
		//利用for循环,对每一位数据进行处理，如果是1，新值左移一位后与多项式进行异或，
		//如果是0，仅左移
		for (int i = 0; i < (sizeof(uint8_t) * 8); i++) {
			if (init_value & 0x8000000)
				init_value = (init_value << 1) ^ poly;
			else
				init_value <<= 1;
		}
		data++;
	}
	return init_value;
}
/*
*********************************************************************************************************
*	函 数 名: CRC16_Modbus
*	功能说明: 计算CRC。 用于Modbus协议。
*	形    参: _pBuf : 参与校验的数据
*			  _usLen : 数据长度
*	返 回 值: 16位整数值。 对于Modbus ，此结果高字节先传送，低字节后传送。
*
*   所有可能的CRC值都被预装在两个数组当中，当计算报文内容时可以简单的索引即可；
*   一个数组包含有16位CRC域的所有256个可能的高位字节，另一个数组含有低位字节的值；
*   这种索引访问CRC的方式提供了比对报文缓冲区的每一个新字符都计算新的CRC更快的方法；
*
*  注意：此程序内部执行高/低CRC字节的交换。此函数返回的是已经经过交换的CRC值；也就是说，该函数的返回值可以直接放置
*        于报文用于发送；
*********************************************************************************************************
*/
uint16_t dataVar::CRC16_Modbus(uint8_t *_pBuf, uint16_t _usLen)
{
	uint8_t ucCRCHi = 0xFF; /* 高CRC字节初始化 */
	uint8_t ucCRCLo = 0xFF; /* 低CRC 字节初始化 */
	uint16_t usIndex;  /* CRC循环中的索引 */

	while (_usLen--)
	{
		usIndex = ucCRCHi ^ *_pBuf++; /* 计算CRC */
		ucCRCHi = ucCRCLo ^ s_CRCHi[usIndex];
		ucCRCLo = s_CRCLo[usIndex];
	}
	return ((uint16_t)ucCRCLo << 8 |  ucCRCHi);
}

// CRC 高位字节值表
static const uint8_t auchCRCHi[] = {
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
};
// CRC 低位字节值表
static const uint8_t auchCRCLo[] = {
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
	0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
	0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
	0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
	0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
	0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
	0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
	0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
	0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
	0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
	0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
	0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
	0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
	0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
	0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
	0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
	0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

/**
* 函数功能: Modbus CRC16 校验计算函数
* 输入参数: pushMsg:待计算的数据首地址,usDataLen:数据长度
* 返 回 值: CRC16 计算结果
* 说    明: 计算结果是高位在前,需要转换才能发送
*/
uint16_t dataVar::MB_CRC16(uint8_t *_pushMsg, uint8_t _usDataLen)
{
	uint8_t uchCRCHi = 0xFF;
	uint8_t uchCRCLo = 0xFF;
	uint16_t uIndex;
	while (_usDataLen--)
	{
		uIndex = uchCRCHi^*_pushMsg++;			//CRC,MODBUS-RTU协议
		uchCRCHi = uchCRCLo^auchCRCHi[uIndex];	//此三行是热电偶温度变送器RS05的CRC校验
		uchCRCLo = auchCRCLo[uIndex];
		/*
		uIndex = uchCRCLo ^ *_pushMsg++;
		uchCRCLo = uchCRCHi^auchCRCHi[uIndex];		//此三行为硬石开发板的CRC校验，与上面三行计算的高位、低位字节反过来了
		uchCRCHi = auchCRCLo[uIndex];
		*/
	}
	return (uchCRCHi | uchCRCLo << 8);
	//return (uchCRCHi << 8 | uchCRCLo);
}
